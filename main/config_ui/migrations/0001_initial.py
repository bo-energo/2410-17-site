# Generated by Django 4.2.20 on 2025-03-12 12:08

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('dashboard', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Block',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('template', models.JSONField(verbose_name='Шаблон')),
                ('description', models.CharField(blank=True, max_length=150, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Визуальный блок',
                'verbose_name_plural': 'Визуальные блоки',
                'db_table': 'block',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='BlockType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тип визуального блока',
                'verbose_name_plural': 'Визуальные блоки. Типы',
                'db_table': 'block_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('description', models.CharField(blank=True, max_length=150, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Cтраница пользовательского интерфейса',
                'verbose_name_plural': 'Страницы пользовательского интерфейса',
                'db_table': 'page',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PageType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=70, null=True, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Тип страницы',
                'verbose_name_plural': 'Страницы пользовательского интерфейса. Типы',
                'db_table': 'page_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Panel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('template', models.JSONField(verbose_name='Шаблон')),
                ('description', models.CharField(blank=True, max_length=150, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Панель',
                'verbose_name_plural': 'Панели',
                'db_table': 'panel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PassportCategories',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(max_length=300, verbose_name='Наименование')),
                ('order', models.IntegerField(default=2000000000, verbose_name='Порядковый номер')),
            ],
            options={
                'verbose_name': 'Категория паспортных данных',
                'verbose_name_plural': 'Паспорт. Категории данных',
                'db_table': 'passport_categories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='UiSettings',
            fields=[
                ('code', models.CharField(max_length=200, primary_key=True, serialize=False, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
                ('value_type', models.CharField(choices=[('str', 'Текст'), ('int', 'Целое число'), ('float', 'Вещественное число')], default='str', verbose_name='Тип значения')),
                ('value', models.CharField(max_length=1000, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Настройка пользовательского интерфейса',
                'verbose_name_plural': 'Настройки пользовательского интерфейса',
                'db_table': 'app_settings',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PassportSignals',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код сигнала')),
                ('order', models.IntegerField(default=2000000000, verbose_name='Порядковый номер')),
                ('pdata_category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='config_ui.passportcategories', verbose_name='Категория паспортных данных')),
            ],
            options={
                'verbose_name': 'Код сигнала паспорта',
                'verbose_name_plural': 'Паспорт. Используемые коды сигналов',
                'db_table': 'passport_signals',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PanelBlock',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('x', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Х')),
                ('y', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Y')),
                ('w', models.PositiveIntegerField(default=1, verbose_name='Ширина')),
                ('h', models.PositiveIntegerField(default=1, verbose_name='Высота')),
                ('min_w', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная ширина')),
                ('min_h', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная высота')),
                ('block', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='config_ui.block', verbose_name='Блок')),
                ('panel', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='config_ui.panel', verbose_name='Панель')),
            ],
            options={
                'verbose_name': 'Блок панели',
                'verbose_name_plural': 'Панели. Блоки',
                'db_table': 'panel_block',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PagePanelLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('x', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Х')),
                ('y', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Y')),
                ('w', models.PositiveIntegerField(default=1, verbose_name='Ширина')),
                ('h', models.PositiveIntegerField(default=1, verbose_name='Высота')),
                ('min_w', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная ширина')),
                ('min_h', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная высота')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config_ui.page', verbose_name='Страница')),
                ('panel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config_ui.panel', verbose_name='Панель')),
            ],
            options={
                'verbose_name': 'Расположение панели страницы',
                'verbose_name_plural': 'Страницы пользовательского интерфейса. Панели. Расположение',
                'db_table': 'page_panel_location',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PagePanel',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('x', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Х')),
                ('y', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Y')),
                ('w', models.PositiveIntegerField(default=1, verbose_name='Ширина')),
                ('h', models.PositiveIntegerField(default=1, verbose_name='Высота')),
                ('min_w', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная ширина')),
                ('min_h', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная высота')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='config_ui.page', verbose_name='Страница')),
                ('panel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config_ui.panel', verbose_name='Панель')),
            ],
            options={
                'verbose_name': 'Панель страницы',
                'verbose_name_plural': 'Страницы пользовательского интерфейса. Панели',
                'db_table': 'page_panel',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PageBlockLocation',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('x', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Х')),
                ('y', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Y')),
                ('w', models.PositiveIntegerField(default=1, verbose_name='Ширина')),
                ('h', models.PositiveIntegerField(default=1, verbose_name='Высота')),
                ('min_w', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная ширина')),
                ('min_h', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная высота')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config_ui.block', verbose_name='Блок')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config_ui.page', verbose_name='Страница')),
                ('panel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='config_ui.panel', verbose_name='Панель')),
            ],
            options={
                'verbose_name': 'Расположение блока страницы',
                'verbose_name_plural': 'Страницы пользовательского интерфейса. Блоки. Расположение',
                'db_table': 'page_block_location',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PageBlock',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('x', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Х')),
                ('y', models.PositiveIntegerField(default=1, verbose_name='Левый верхний угол. Y')),
                ('w', models.PositiveIntegerField(default=1, verbose_name='Ширина')),
                ('h', models.PositiveIntegerField(default=1, verbose_name='Высота')),
                ('min_w', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная ширина')),
                ('min_h', models.PositiveIntegerField(blank=True, null=True, verbose_name='Минимальная высота')),
                ('block', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='config_ui.block', verbose_name='Блок')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='config_ui.page', verbose_name='Страница')),
            ],
            options={
                'verbose_name': 'Блок страницы',
                'verbose_name_plural': 'Страницы пользовательского интерфейса. Блоки',
                'db_table': 'page_block',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='page',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='config_ui.pagetype', verbose_name='Тип'),
        ),
        migrations.AddField(
            model_name='block',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='config_ui.blocktype', verbose_name='Тип'),
        ),
        migrations.CreateModel(
            name='AssetPage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('asset', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dashboard.assets', verbose_name='Оборудование')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='config_ui.page', verbose_name='Страница')),
            ],
            options={
                'verbose_name': 'Оборудование. Страница пользовательского интерфейса',
                'verbose_name_plural': 'Оборудование. Страницы пользовательского интерфейса',
                'db_table': 'asset_page',
                'managed': True,
            },
        ),
        migrations.AddConstraint(
            model_name='panelblock',
            constraint=models.UniqueConstraint(fields=('panel', 'block'), name='unique_panelblock'),
        ),
        migrations.AddConstraint(
            model_name='pagepanel',
            constraint=models.UniqueConstraint(fields=('page', 'panel'), name='unique_pagepanel'),
        ),
        migrations.AddConstraint(
            model_name='assetpage',
            constraint=models.UniqueConstraint(fields=('asset', 'page'), name='unique_assetpage'),
        ),
    ]
