# Generated by Django 4.2.20 on 2025-03-12 12:08

import dashboard.data.assistmodel
import dashboard.services.django_models.use_cases
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AccessPoints',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('ip', models.CharField(blank=True, max_length=30, null=True, verbose_name='IP-адрес')),
                ('port', models.IntegerField(blank=True, null=True, verbose_name='Порт')),
                ('url', models.CharField(blank=True, max_length=200, null=True, verbose_name='URL')),
                ('com_port', models.CharField(blank=True, max_length=20, null=True, verbose_name='COM-порт')),
                ('baud_rate', models.IntegerField(blank=True, null=True, verbose_name='Бит/сек')),
                ('data_bits', models.IntegerField(blank=True, null=True, verbose_name='Биты данных')),
                ('stop_bits', models.CharField(blank=True, max_length=20, null=True, verbose_name='Стоповые биты')),
                ('parity', models.CharField(blank=True, choices=[('Even', 'Even'), ('No', 'No'), ('Mark', 'Mark'), ('Odd', 'Odd'), ('Space', 'Space')], default=None, max_length=15, null=True, verbose_name='Четность')),
                ('flow_control', models.BooleanField(blank=True, null=True, verbose_name='Управление потоком')),
                ('username', models.CharField(blank=True, max_length=30, null=True, verbose_name='Имя пользователя')),
                ('password', models.CharField(blank=True, max_length=30, null=True, verbose_name='Пароль')),
            ],
            options={
                'verbose_name': 'Точка доступа',
                'verbose_name_plural': 'Точки доступа',
                'db_table': 'access_points',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('guid', models.CharField(blank=True, max_length=200, null=True, verbose_name='Уникальный идентификатор')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Диспетчерское наименование')),
                ('disp_number', models.IntegerField(blank=True, null=True, verbose_name='Диспетчерский номер')),
                ('model', models.CharField(blank=True, max_length=200, null=True, verbose_name='Тип')),
                ('image', models.ImageField(blank=True, null=True, upload_to=dashboard.services.django_models.use_cases.get_asset_image_path, verbose_name='Изображение')),
                ('scheme_image', models.ImageField(blank=True, null=True, upload_to=dashboard.services.django_models.use_cases.get_asset_scheme_image_path, verbose_name='Визуальная схема')),
                ('mms_logical_device', models.CharField(blank=True, max_length=20, null=True, verbose_name='Логическое устройство mms')),
                ('on_scheme_x', models.FloatField(blank=True, null=True, verbose_name='Позиция на схеме, х')),
                ('on_scheme_y', models.FloatField(blank=True, null=True, verbose_name='Позиция на схеме, y')),
            ],
            options={
                'verbose_name': 'Оборудование',
                'verbose_name_plural': 'Оборудование',
                'db_table': 'assets',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AssetsType',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=30, verbose_name='Код')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Категория оборудования',
                'verbose_name_plural': 'Категории оборудования',
                'db_table': 'assets_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='AssetsTypeChartTabs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
            ],
            options={
                'verbose_name': 'Вкладка графиков категории оборудования',
                'verbose_name_plural': 'Категории оборудования.Вкладки графиков',
                'db_table': 'assets_type_chart_tabs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ChartTabs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Вкладка графиков',
                'verbose_name_plural': 'Вкладки графиков',
                'db_table': 'chart_tabs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DatabusSources',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Очередь шины данных',
                'verbose_name_plural': 'Сигналы. Очереди шины данных',
                'db_table': 'databus_sources',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DataTypes',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип данных',
                'verbose_name_plural': 'Типы данных',
                'db_table': 'data_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DeviceModels',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
                ('manufacturer', models.CharField(blank=True, max_length=200, null=True, verbose_name='Производитель')),
                ('measuring_range', models.CharField(blank=True, max_length=50, null=True, verbose_name='Диапазон измерений')),
                ('accuracy', models.CharField(blank=True, max_length=100, null=True, verbose_name='Точность измерений')),
                ('register_no', models.CharField(blank=True, max_length=50, null=True, verbose_name='Номер сертификата')),
            ],
            options={
                'verbose_name': 'Модель прибора мониторинга',
                'verbose_name_plural': 'Модели приборов мониторинга',
                'db_table': 'device_models',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Devices',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=400, verbose_name='Наименование')),
                ('common_address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Общий адрес')),
                ('wordorder', models.BooleanField(blank=True, choices=[(True, 'Big'), (False, 'Little')], default=False, null=True, verbose_name='Порядок слов')),
                ('byteorder', models.BooleanField(blank=True, choices=[(True, 'Big'), (False, 'Little')], default=False, null=True, verbose_name='Порядок байт')),
                ('enabled', models.BooleanField(blank=True, choices=[(True, 'Да'), (False, 'Нет')], default=True, null=True, verbose_name='Включен')),
                ('modbus_function', models.PositiveSmallIntegerField(blank=True, choices=[(1, '01 - Read coils'), (2, '02 - Read contacts'), (3, '03 - Read holding registers'), (4, '04 - Read input registers'), (24, '24 - Read FIFO queue')], default=None, null=True, verbose_name='Функция чтения modbus')),
                ('mms_logical_device', models.CharField(blank=True, max_length=20, null=True, verbose_name='Логическое устройство mms')),
            ],
            options={
                'verbose_name': 'Источник данных',
                'verbose_name_plural': 'Источники данных',
                'db_table': 'devices',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DeviceTypes',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип прибора мониторинга',
                'verbose_name_plural': 'Типы приборов мониторинга',
                'db_table': 'device_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DiagMsgLevel',
            fields=[
                ('code', models.IntegerField(primary_key=True, serialize=False, verbose_name='Числовой код')),
                ('name', models.CharField(max_length=100, verbose_name='Строковый код')),
            ],
            options={
                'verbose_name': 'Уровень критичности диаг. сообщений',
                'verbose_name_plural': 'Уровни критичности диаг. сообщений',
                'db_table': 'diag_msg_level',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='DynamicStorages',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=30, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Таблица хранения значений',
                'verbose_name_plural': 'Сигналы. Таблицы хранения значений',
                'db_table': 'dynamic_storages',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Formulas',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='Наименование')),
                ('expression', models.CharField(blank=True, max_length=200, null=True, verbose_name='Выражение')),
            ],
            options={
                'verbose_name': 'Формула',
                'verbose_name_plural': 'Формулы',
                'db_table': 'formulas',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='GeoMap',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('collection_code', models.CharField(choices=[('Areas', 'Areas'), ('Lines', 'Lines'), ('Substations', 'Substations')], max_length=50, verbose_name='Код коллекции')),
                ('geometry', models.JSONField(verbose_name='Геометрия')),
                ('properties', models.JSONField(verbose_name='Дополнительные свойства')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Элемент карты',
                'verbose_name_plural': 'Географическая карта',
                'db_table': 'geo_map',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='GeoMapSetting',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('default_zoom', models.FloatField(default=5, verbose_name='Масштаб по умолчанию')),
                ('min_zoom', models.FloatField(default=4, verbose_name='Минимальный масштаб')),
                ('max_zoom', models.FloatField(default=12, verbose_name='Максимальный масштаб')),
                ('rotation', models.FloatField(default=0, verbose_name='Поворот')),
                ('center_x', models.FloatField(default=-3124977.27171, verbose_name='Координата X центра')),
                ('center_y', models.FloatField(default=3694888.906869, verbose_name='Координата Y центра')),
                ('description', models.CharField(blank=True, max_length=200, null=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Настройка карты',
                'verbose_name_plural': 'Географическая карта. Настройка',
                'db_table': 'geo_map_setting',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ManualMeasurements',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время замера')),
                ('value', models.FloatField(verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Ручной замер',
                'verbose_name_plural': 'Сигналы. Ручные замеры',
                'db_table': 'manual_measurements',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MeasureUnits',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=50, verbose_name='Код')),
                ('name', models.CharField(max_length=50, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Единица измерения',
                'verbose_name_plural': 'Сигналы. Единицы измерения',
                'db_table': 'measure_units',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ModbusTypes',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип данных modbus',
                'verbose_name_plural': 'Типы данных modbus',
                'db_table': 'modbus_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='MsgToPlot',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('diag_model', models.CharField(max_length=100, verbose_name='Диагностическая модель')),
                ('signal', models.CharField(max_length=100, verbose_name='Сигнал группы графиков')),
                ('value', models.CharField(max_length=100, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Привязка диаг. сообщения к группе графиков',
                'verbose_name_plural': 'Привязки диаг. сообщений к группам графиков',
                'db_table': 'msg_to_plot',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Params',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Время задания')),
                ('value', models.CharField(blank=True, max_length=400, null=True, verbose_name='Значение')),
            ],
            options={
                'verbose_name': 'Параметр',
                'verbose_name_plural': 'Параметры. Значения',
                'db_table': 'params',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='PlotTypes',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип графика',
                'verbose_name_plural': 'Типы графиков',
                'db_table': 'plot_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Protocols',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
                ('listener', models.BooleanField(blank=True, choices=[(True, 'Listener'), (False, 'Reader')], default=False, null=True, verbose_name='Метод взаимодействия')),
            ],
            options={
                'verbose_name': 'Протокол',
                'verbose_name_plural': 'Протоколы',
                'db_table': 'protocols',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='ResultHashes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tables', models.CharField(max_length=1000, verbose_name='Таблицы БД')),
                ('func', models.CharField(max_length=50, verbose_name='Функция')),
                ('input_args', models.BinaryField(blank=True, null=True, verbose_name='Входные аргументы')),
                ('hash', models.CharField(blank=True, max_length=512, null=True, verbose_name='Хеш')),
            ],
            options={
                'verbose_name': 'Хеш данных',
                'verbose_name_plural': 'Хеши данных',
                'db_table': 'result_hashes',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Schedules',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('interval_seconds', models.IntegerField(verbose_name='Интервал (сек)')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Расписание',
                'verbose_name_plural': 'Расписания',
                'db_table': 'schedules',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SignalGroups',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Группа сигнала',
                'verbose_name_plural': 'Сигналы. Группы',
                'db_table': 'signal_groups',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SignalTypes',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Тип сигнала',
                'verbose_name_plural': 'Типы сигналов',
                'db_table': 'signal_types',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SignalСategories',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(max_length=200, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Категория сигнала',
                'verbose_name_plural': 'Сигналы. Категории',
                'db_table': 'signal_categories',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Substations',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=400, null=True, verbose_name='Название')),
                ('type', models.CharField(choices=[('node', 'Организация'), ('end_node', 'Подстанция')], default='node', max_length=10, verbose_name='Тип')),
                ('scheme_image', models.ImageField(blank=True, null=True, upload_to=dashboard.services.django_models.use_cases.get_substation_image_path, verbose_name='Схема')),
                ('parent', models.ForeignKey(blank=True, limit_choices_to={'type': 'node'}, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.substations', verbose_name='Входит в')),
            ],
            options={
                'verbose_name': 'Элемент организационной структуры',
                'verbose_name_plural': 'Организационная структура',
                'db_table': 'substations',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SignalsGuide',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=100, verbose_name='Код')),
                ('name', models.CharField(max_length=300, verbose_name='Наименование')),
                ('relevance_span', models.IntegerField(blank=True, null=True, verbose_name='Актуальность сигнала')),
                ('freeze_span', models.IntegerField(blank=True, null=True, verbose_name='Достоверность сигнала')),
                ('lim0_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Код сигнала lim0')),
                ('lim1_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Код сигнала lim1')),
                ('diag_code', models.CharField(blank=True, max_length=100, null=True, verbose_name='Код сигнала статуса')),
                ('natural_range_from', models.FloatField(blank=True, null=True, verbose_name='Нижнее значение естественного диапазона')),
                ('natural_range_to', models.FloatField(blank=True, null=True, verbose_name='Верхнее значение естественного диапазона')),
                ('speed_limit', models.FloatField(blank=True, null=True, verbose_name='Лимит по скорости изменения')),
                ('mms_data_object', models.CharField(blank=True, max_length=50, null=True, verbose_name='Объект данных mms')),
                ('mms_logical_node', models.CharField(blank=True, max_length=20, null=True, verbose_name='Логический узел mms')),
                ('mms_class', models.CharField(blank=True, max_length=20, null=True, verbose_name='Класс данных mms')),
                ('opc_label', models.CharField(blank=True, max_length=50, null=True, verbose_name='Метка OPC')),
                ('precision', models.IntegerField(blank=True, null=True, verbose_name='Точность значения')),
                ('in_plot', models.BooleanField(blank=True, choices=[(True, 'Да'), (False, 'Нет')], default=False, null=True, verbose_name='На график')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.signalсategories', verbose_name='Категория сигнала')),
                ('data_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.datatypes', verbose_name='Тип данных')),
                ('databus_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.databussources', verbose_name='Очередь шины данных')),
                ('dynamic_storage', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.dynamicstorages', verbose_name='Таблица хранения значений')),
                ('group', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.signalgroups', verbose_name='Группа сигнала')),
                ('plot_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.plottypes', verbose_name='Тип графика')),
                ('sg_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.signaltypes', verbose_name='Тип сигнала')),
                ('unit', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.measureunits', verbose_name='Единица измерения')),
            ],
            options={
                'verbose_name': 'Код сигнала',
                'verbose_name_plural': 'Сигналы. Коды',
                'db_table': 'signals_guide',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SignalsChartTabs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('asset', models.ForeignKey(blank=True, db_column='asset', null=True, on_delete=django.db.models.deletion.CASCADE, to='dashboard.assets', verbose_name='Оборудование')),
                ('chart_tab', models.ForeignKey(db_column='chart_tab', on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.assetstypecharttabs', verbose_name='Вкладка графиков')),
                ('code', models.ForeignKey(db_column='code', on_delete=django.db.models.deletion.CASCADE, to='dashboard.signalsguide', verbose_name='Код сигнала')),
            ],
            options={
                'verbose_name': 'Вкладка графиков сигнала',
                'verbose_name_plural': 'Сигналы. Вкладки графиков',
                'db_table': 'signals_chart_tabs',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Signals',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('enabled', models.BooleanField(blank=True, choices=[(True, 'Да'), (False, 'Нет')], default=True, null=True, verbose_name='Включен')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='Адрес')),
                ('bit', models.IntegerField(blank=True, null=True, verbose_name='Бит в регистре')),
                ('modbus_function', models.PositiveSmallIntegerField(blank=True, choices=[(1, '01 - Read coils'), (2, '02 - Read contacts'), (3, '03 - Read holding registers'), (4, '04 - Read input registers'), (24, '24 - Read FIFO queue')], default=None, null=True, verbose_name='Функция чтения modbus')),
                ('deveui', models.CharField(blank=True, max_length=200, null=True, verbose_name='Адрес LoRa устройства')),
                ('func_constr', models.CharField(blank=True, max_length=100, null=True, verbose_name='FC MMS')),
                ('value_path', models.CharField(blank=True, max_length=100, null=True, verbose_name='Путь к значению сигнала')),
                ('quality_path', models.CharField(blank=True, max_length=100, null=True, verbose_name='Путь к значению качества')),
                ('timestamp_path', models.CharField(blank=True, max_length=100, null=True, verbose_name='Путь к временной метке')),
                ('fields_path', models.CharField(blank=True, max_length=1000, null=True, verbose_name='Найденные пути MMS')),
                ('input_port', models.IntegerField(blank=True, null=True, verbose_name='Входящий порт')),
                ('check_method', models.CharField(blank=True, max_length=20, null=True, verbose_name='Метод проверки')),
                ('ping_period', models.CharField(blank=True, max_length=10, null=True, verbose_name='Период проверки соединения')),
                ('asset', models.ForeignKey(blank=True, db_column='asset', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.assets', verbose_name='Оборудование')),
                ('code', models.ForeignKey(blank=True, db_column='code', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.signalsguide', verbose_name='Код')),
                ('device', models.ForeignKey(db_column='device', on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.devices', verbose_name='Прибор мониторинга')),
                ('formula', models.ForeignKey(blank=True, db_column='formula', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.formulas', verbose_name='Формула')),
                ('schedule', models.ForeignKey(blank=True, db_column='schedule', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.schedules', verbose_name='Расписание')),
                ('unit_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.measureunits', verbose_name='Ед. измер. источника')),
                ('value_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.modbustypes', verbose_name='Тип данных modbus')),
            ],
            options={
                'verbose_name': 'Сигнал',
                'verbose_name_plural': 'Сигналы',
                'db_table': 'signals',
                'managed': True,
            },
            bases=(dashboard.data.assistmodel.AssistMixin, models.Model),
        ),
        migrations.AddConstraint(
            model_name='resulthashes',
            constraint=models.UniqueConstraint(fields=('tables', 'func', 'input_args'), name='unique_resulthashes'),
        ),
        migrations.AddField(
            model_name='params',
            name='asset',
            field=models.ForeignKey(blank=True, db_column='asset', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.assets', verbose_name='Оборудование'),
        ),
        migrations.AddField(
            model_name='params',
            name='code',
            field=models.ForeignKey(db_column='code', on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.signalsguide', verbose_name='Код'),
        ),
        migrations.AddField(
            model_name='manualmeasurements',
            name='signal',
            field=models.ForeignKey(db_column='signal_id', on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.signals', verbose_name='Сигнал'),
        ),
        migrations.AddField(
            model_name='geomap',
            name='linked_obj',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.substations', verbose_name='Связанный объект'),
        ),
        migrations.AddField(
            model_name='devices',
            name='access_point',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.accesspoints', verbose_name='Точка доступа'),
        ),
        migrations.AddField(
            model_name='devices',
            name='model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.devicemodels', verbose_name='Тип'),
        ),
        migrations.AddField(
            model_name='devices',
            name='protocol',
            field=models.ForeignKey(blank=True, db_column='protocol', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.protocols', verbose_name='Протокол'),
        ),
        migrations.AddField(
            model_name='devices',
            name='schedule',
            field=models.ForeignKey(blank=True, db_column='schedule', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.schedules', verbose_name='Расписание'),
        ),
        migrations.AddField(
            model_name='devicemodels',
            name='device_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.devicetypes', verbose_name='Тип'),
        ),
        migrations.AddField(
            model_name='assetstypecharttabs',
            name='asset_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.assetstype', verbose_name='Категория оборудования'),
        ),
        migrations.AddField(
            model_name='assetstypecharttabs',
            name='chart_tab',
            field=models.ForeignKey(db_column='chart_tab', on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.charttabs', verbose_name='Вкладка графиков'),
        ),
        migrations.AddField(
            model_name='assets',
            name='substation',
            field=models.ForeignKey(blank=True, limit_choices_to={'type': 'end_node'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dashboard.substations', verbose_name='Подстанция'),
        ),
        migrations.AddField(
            model_name='assets',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='dashboard.assetstype', verbose_name='Категория'),
        ),
        migrations.CreateModel(
            name='SignalsGuideFront',
            fields=[
            ],
            options={
                'verbose_name': 'Код сигнала',
                'verbose_name_plural': 'Сигналы. Коды. Интерфейс',
                'proxy': True,
                'indexes': [],
                'constraints': [],
            },
            bases=('dashboard.signalsguide',),
        ),
    ]
