"""
Django settings for main project.

Generated by 'django-admin startproject' using Django 4.2.9.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import logging
import logging.config
import logging.handlers
import queue
from dotenv import load_dotenv
from pathlib import Path
from urllib.parse import urlparse
from main.utils.filesyst import get_path_log_dir
from custom_logging.handlers import CustQueueListener, CustFileHandler

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Loading environment variables from the .env file.
#  This file should be at the root of the project
load_dotenv()

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = bool(os.getenv("DJANGO_DEBUG", False))
print(f"{DEBUG = }")
ALLOWED_HOSTS = ['*']

CORS_ALLOW_ALL_ORIGINS = True

if os.getenv("CSRF_TRUSTED_ORIGINS"):
    CSRF_TRUSTED_ORIGINS = [
        s for el in os.getenv("CSRF_TRUSTED_ORIGINS", "").split(",")
        if (s := el.strip())
    ]

DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'dashboard.apps.DashboardConfig',
    'config_ui.apps.ConfigUiConfig',
    'laser.apps.LaserConfig',
    'localization.apps.LocalizationConfig',
    'kafka_sync.apps.KafkaSyncConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'main.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR.joinpath('templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'main.wsgi.application'

VM_ADDRESS = os.getenv("VM_ADDRESS")
VM_PREFIX = os.getenv("VM_PREFIX")
VML_ADDRESS = os.getenv("VML_ADDRESS")
VML_PROJECT_ID = os.getenv("VML_PROJECT_ID", "0")

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
URL_DB = urlparse(os.getenv("SETTINGS_DB"))
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': URL_DB.path[1:],
        'USER': URL_DB.username,
        'PASSWORD': URL_DB.password,
        'HOST': URL_DB.hostname,
        'PORT': URL_DB.port,
    }
}

cache_path = BASE_DIR.joinpath('django_cache')
GEOMAP_CACHE = "geomap"
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": cache_path.joinpath('default').resolve(),

    },
    GEOMAP_CACHE: {
        "BACKEND": "django.core.cache.backends.filebased.FileBasedCache",
        "LOCATION": cache_path.joinpath('geomap').resolve(),
        "TIMEOUT": None
    }
}

KAFKA = os.getenv("KAFKA")
TOPICS = {
    "ASSETS": os.getenv("TOPIC_FOR_ASSETS") or "assets",
    "LISTENER": os.getenv("TOPIC_FOR_LISTENER"),
    "READER": os.getenv("TOPIC_FOR_READER"),
    "TOPIC_FOR_SIGNALS_GUIDE": os.getenv("TOPIC_FOR_SIGNALS_GUIDE"),
    "MMS_CONFIG": os.getenv("TOPIC_FOR_MMS_CONFIG")
}

URl_SIGNAL_TEST = os.getenv("URl_SIGNAL_TEST")
# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = os.getenv("TIME_ZONE", 'Europe/Moscow')

USE_I18N = True

USE_TZ = True


ROUND_NDIGIT = int(os.getenv("ROUND_NDIGIT", 2))

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = BASE_DIR.joinpath('static')

STATICFILES_DIRS = [
    BASE_DIR.joinpath('main/static').as_posix(),
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR.joinpath('media')

LOGS_DIR = get_path_log_dir(BASE_DIR, 'logs')

LOGS_QUE = queue.Queue(-1)

console_fmt = '[%(levelname)-7s] [%(name)-12s] %(funcName)s:%(lineno)d  -> %(message)s'
file_fmt = '[%(asctime)s] [%(levelname)-7s] [%(name)-12s] %(funcName)s:%(lineno)d  -> %(message)s'

file_handler = CustFileHandler(f'{str(LOGS_DIR)}/q_debug.log',
                               maxBytes=512000,
                               backupCount=10,
                               file_fmt=file_fmt).get_handler()

LEVEL_LOG = os.getenv("LEVEL_LOG", 'DEBUG')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'console': {
            'format': console_fmt
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': 'INFO',
            'formatter': 'console',
        },
        'queue_handler': {
            'class': 'logging.handlers.QueueHandler',
            'level': 'DEBUG',
            'queue': LOGS_QUE,
        },
        'queue_listener': {
            '()': CustQueueListener,
            'cust_level': logging.DEBUG,
            'queue': LOGS_QUE,
            'handlers': [file_handler,],
        }
    },
    'loggers': {
        '': {
            'level': LEVEL_LOG,
            'handlers': ['console', 'queue_handler',],
            'propagate': False,
        },
        'django': {
            'handlers': ['console', 'queue_handler',],
            'propagate': False,
        },
        'django.server': {
            'level': LEVEL_LOG,
            'handlers': ['console', 'queue_handler',],
            "propagate": False,
        },
        'django.db.backends': {
            'level': LEVEL_LOG,
            'handlers': ['console', 'queue_handler',],
            "propagate": False,
        },
        'fontTools.subset': {
            'level': 'WARNING',
            'handlers': ['console', 'queue_handler',],
            "propagate": False,
        }
    },
}

queue_listener = logging.handlers.QueueListener(LOGS_QUE, file_handler)
queue_listener.start()
